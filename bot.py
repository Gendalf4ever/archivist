import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from config import BOT_TOKEN, BOT_USERNAME
import database as db

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –£—Ç–∏–ª–∏—Ç—ã
def extract_links(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return re.findall(r'https?://[^\s]+', text) if text else []

def extract_youtube_title(text):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    lines = text.split('\n')
    for i, line in enumerate(lines):
        if 'youtube.com' in line or 'youtu.be' in line:
            if i > 0 and not lines[i-1].startswith('http'):
                title = lines[i-1].strip()
                if title and len(title) > 0 and len(title) < 300:
                    return title[:200]
    
    text_without_urls = re.sub(r'https?://[^\s]+', '', text).strip()
    if text_without_urls and len(text_without_urls) < 300:
        return text_without_urls[:200]
    
    return None

def get_youtube_video_title(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube –ø–æ URL"""
    try:
        import yt_dlp
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            title = info.get('title', None)
            if title:
                logger.info(f"[YOUTUBE_FETCH] Got title: {title[:50]}")
                return title[:200]
    except Exception as e:
        logger.debug(f"[YOUTUBE_FETCH] Error: {e}")
    return None

async def send_long_message(update, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if len(text) > 4000:
        await update.message.reply_text(text[:4000], reply_markup=reply_markup)
        for i in range(4000, len(text), 4000):
            await update.message.reply_text(text[i:i+4000])
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def send_long_query_message(query, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback query"""
    if len(text) > 4000:
        await query.message.reply_text(text[:4000], reply_markup=reply_markup)
        for i in range(4000, len(text), 4000):
            await query.message.reply_text(text[i:i+4000])
    else:
        await query.message.reply_text(text, reply_markup=reply_markup)

def format_links_response(links, title, show_title=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
    response = f"{title}\n\n" if title else ""
    
    if not links:
        return response + "–ù–µ—Ç —Å—Å—ã–ª–æ–∫"
    
    for i, link in enumerate(links, 1):
        try:
            date = link.timestamp.strftime('%d.%m.%Y') if link.timestamp else "N/A"
        except Exception:
            date = "N/A"
        
        if show_title and link.title:
            # YouTube —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º - –∂–∏—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            response += f"{i}. <b>{link.title}</b>\n"
            response += f"üîó <code>{link.url}</code>\n"
            response += f"üë§ {link.username or 'Unknown'} | üìÖ {date}\n"
            response += "\n"  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Å—ã–ª–∫–∞–º–∏
        else:
            response += f"{i}. <code>{link.url}</code>\n"
            response += f"üë§ {link.username or 'Unknown'} | üìÖ {date}\n"
            
            message_text = link.message_text or ""
            preview = message_text[:50] + "..." if len(message_text) > 50 else message_text
            if preview:
                response += f"üí¨ <i>{preview}</i>\n"
            
            response += "\n"  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Å—ã–ª–∫–∞–º–∏
    
    return response

# ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    chat_type = update.message.chat.type
    logger.info(f"[START] Chat ID: {update.message.chat_id}, Type: {chat_type}")
    
    if chat_type in ['group', 'supergroup']:
        menu = f"""
ü§ñ <b>–Ø –∑–¥–µ—Å—å!</b>

–ö–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ (—Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞):
/all_links@{BOT_USERNAME} - –í—Å–µ —Å—Å—ã–ª–∫–∏
/youtube@{BOT_USERNAME} - YouTube —Å—Å—ã–ª–∫–∏
/add_preset@{BOT_USERNAME} - –°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä
/my_presets@{BOT_USERNAME} - –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã

üí° <b>–ü—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π —Å—Å—ã–ª–∫–∏, —è –∏—Ö —Å–æ—Ö—Ä–∞–Ω—é!</b>
"""
        await update.message.reply_text(menu, parse_mode='HTML')
    else:
        menu = f"""
ü§ñ <b>–ß—Ç–æ –Ω—É–∂–Ω–æ?</b>

üîó <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/all_links - –í—Å–µ —Å—Å—ã–ª–∫–∏
/youtube - –¢–æ–ª—å–∫–æ —é—Ç—É–±
/add_preset - –°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä
/my_presets - –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã

üí° <b>–ü—Ä–æ—Å—Ç–æ –∫–∏–¥–∞–π —Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç</b>
"""
        keyboard = [
            [InlineKeyboardButton("üîó –í—Å–µ —Å—Å—ã–ª–∫–∏", callback_data="all_links")],
            [InlineKeyboardButton("üé¨ YouTube", callback_data="youtube")],
            [InlineKeyboardButton("üìù –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="my_presets")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="add_preset_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(menu, parse_mode='HTML', reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = f"""
ü§ñ <b>–û–±—ä—è—Å–Ω—è—é:</b>

üîó <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/all_links –∏–ª–∏ /all_links@{BOT_USERNAME} - –í—Å–µ —Å—Å—ã–ª–∫–∏
/youtube –∏–ª–∏ /youtube@{BOT_USERNAME} - –Æ—Ç—É–± —Å—Å—ã–ª–∫–∏  
/add_preset –∏–ª–∏ /add_preset@{BOT_USERNAME} - –°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä
/my_presets –∏–ª–∏ /my_presets@{BOT_USERNAME} - –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã

üìù <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä:</b>
/add_preset habr habr
–ü–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ /habr –∏–ª–∏ /habr@{BOT_USERNAME}
"""
    await update.message.reply_text(help_text, parse_mode='HTML')

async def all_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /all_links"""
    logger.info(f"[ALL_LINKS] Chat ID: {update.message.chat_id}")
    chat_id = update.message.chat_id
    links = db.get_all_links(chat_id, limit=50)
    
    if not links:
        await update.message.reply_text("–ï—â–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
        return
    
    response = "–í—Å–µ —Å—Å—ã–ª–∫–∏:\n\n"
    response += format_links_response(links, "")
    
    keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="all_links")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_long_message(update, response, reply_markup)

async def youtube_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /youtube"""
    logger.info(f"[YOUTUBE] Chat ID: {update.message.chat_id}")
    chat_id = update.message.chat_id
    links = db.get_youtube_links(chat_id, limit=50)
    
    if not links:
        await update.message.reply_text("–Æ—Ç—É–± —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç")
        return
    
    response = "YouTube —Å—Å—ã–ª–∫–∏:\n\n"
    response += format_links_response(links, "", show_title=True)
    
    keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="youtube")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_long_message(update, response, reply_markup)

async def add_preset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /add_preset"""
    logger.info(f"[ADD_PRESET] Chat ID: {update.message.chat_id}")
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_preset <–∫–æ–º–∞–Ω–¥–∞> <—Å–ª–æ–≤–æ>")
        return
    
    command_name = context.args[0].lower()
    search_term = ' '.join(context.args[1:])
    chat_id = update.message.chat_id
    
    if db.preset_exists(chat_id, command_name):
        await update.message.reply_text(f"–ü—Ä–µ—Å–µ—Ç '{command_name}' —É–∂–µ –µ—Å—Ç—å")
        return
    
    db.create_preset(chat_id, command_name, search_term)
    logger.info(f"[PRESET_CREATED] Name: {command_name}")
    await update.message.reply_text(f"–ü—Ä–µ—Å–µ—Ç '{command_name}' —Å–æ–∑–¥–∞–Ω!")

async def my_presets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_presets"""
    logger.info(f"[MY_PRESETS] Chat ID: {update.message.chat_id}")
    chat_id = update.message.chat_id
    presets = db.get_presets(chat_id)
    
    if not presets:
        keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="add_preset_help")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–§–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç", reply_markup=reply_markup)
        return
    
    response = "–¢–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    for preset in presets:
        response += f"/{preset.preset_name} - {preset.search_term}\n"
    
    keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="add_preset_help")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(response, reply_markup=reply_markup)

async def handle_preset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    text = update.message.text
    
    if not text or not text.startswith('/'):
        return
    
    command = text[1:].split('@')[0].split(' ')[0]
    chat_id = update.message.chat_id
    
    preset = db.get_preset(chat_id, command)
    if not preset:
        return
    
    logger.info(f"[HANDLE_PRESET] Command: {command}")
    links = db.search_links_by_preset(chat_id, preset.search_term, limit=50)
    
    if not links:
        await update.message.reply_text(f"–ü–æ '{preset.search_term}' –Ω–µ—Ç —Å—Å—ã–ª–æ–∫")
        return
    
    response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ '{preset.search_term}':\n\n"
    response += format_links_response(links, "")
    await send_long_message(update, response)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text and update.message.text.startswith('/'):
        return
    
    text = update.message.text or update.message.caption or ""
    if not text:
        return
    
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name
    
    links = extract_links(text)
    logger.debug(f"[HANDLE_MESSAGE] Found {len(links)} links")
    
    for link in links:
        title = None
        
        if 'youtube.com' in link or 'youtu.be' in link:
            title = extract_youtube_title(text)
            if not title:
                logger.debug(f"[YOUTUBE_FETCH] Fetching: {link[:50]}")
                title = get_youtube_video_title(link)
        
        db.save_link(chat_id, user_id, username, link, text, title=title)
        logger.info(f"[SAVED_LINK] URL: {link[:50]}, Title: {title[:30] if title else 'None'}")

async def new_chat_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —á–ª–µ–Ω–æ–≤"""
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")

async def handle_inline_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    chat_id = query.message.chat_id
    callback_data = query.data
    
    logger.info(f"[INLINE] Button: {callback_data}, Chat: {chat_id}, User: {query.from_user.id}")
    
    # –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
    
    if callback_data == "all_links":
        links = db.get_all_links(chat_id)
        if not links:
            await query.message.reply_text("–ù–µ—Ç —Å—Å—ã–ª–æ–∫")
            return
        response = "–í—Å–µ —Å—Å—ã–ª–∫–∏:\n\n" + format_links_response(links, "")
        keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="all_links")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await send_long_query_message(query, response, reply_markup)
    
    elif callback_data == "youtube":
        links = db.get_youtube_links(chat_id)
        if not links:
            await query.message.reply_text("–ù–µ—Ç YouTube —Å—Å—ã–ª–æ–∫")
            return
        response = "YouTube —Å—Å—ã–ª–∫–∏:\n\n" + format_links_response(links, "", show_title=True)
        keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="youtube")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await send_long_query_message(query, response, reply_markup)
    
    elif callback_data == "my_presets":
        presets = db.get_presets(chat_id)
        if not presets:
            await query.message.reply_text("–ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            return
        response = "–¢–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
        for preset in presets:
            response += f"/{preset.preset_name}\n"
        keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å", callback_data="add_preset_help")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(response, reply_markup=reply_markup)
    
    elif callback_data == "add_preset_help":
        msg = "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:\n/add_preset –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–≤–æ"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(msg, reply_markup=reply_markup)
    
    elif callback_data == "start":
        menu = "–ú–µ–Ω—é"
        keyboard = [
            [InlineKeyboardButton("–í—Å–µ —Å—Å—ã–ª–∫–∏", callback_data="all_links")],
            [InlineKeyboardButton("YouTube", callback_data="youtube")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(menu, reply_markup=reply_markup)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    handlers = [
        CommandHandler("start", start),
        CommandHandler("help", help_command),
        CommandHandler("all_links", all_links),
        CommandHandler("youtube", youtube_links),
        CommandHandler("add_preset", add_preset),
        CommandHandler("my_presets", my_presets),
        CallbackQueryHandler(handle_inline_button),
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_members),
        MessageHandler(filters.COMMAND, handle_preset),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
        MessageHandler(filters.ALL & ~filters.COMMAND, handle_message)
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    print(f"Bot started: @{BOT_USERNAME}")
    logger.info(f"Bot started with token: {BOT_TOKEN[:20]}...")
    application.run_polling()

if __name__ == '__main__':
    main()
